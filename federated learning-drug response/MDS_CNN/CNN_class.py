import csv
import numpy as np
import pandas as pd
import os
import scipy as sp
from scipy.stats import pearsonr
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
import cv2
import pickle
from Toolbox import NRMSE, Random_Image_Gen, two_d_norm, two_d_eq, Assign_features_to_pixels, MDS_Im_Gen, Bias_Calc, \
    REFINED_Im_Gen
from keras.utils.np_utils import *

drug_names = ["Afatinib_1032", "PD0325901_1060"]
Results_Dic = {}
# %%

for SEL_CEL in drug_names:
    # Loading the the drug responses and their IDs (NSC)
    DF = pd.read_csv("GDSC2_response_class.csv")
    FilteredDF = DF[SEL_CEL]  # Pulling out the selected cell line responses

    Feat_DF = pd.read_csv(
        "GDSC2_Expr_CGC_feature.csv")  # Load the drug descriptors of the drugs applied on the selected cell line
    Cell_Features = Feat_DF

    Y = np.array(FilteredDF)
    # Features
    X = Cell_Features.values
    X = X[:, 2:]
    # fix random seed for reproducibility
    seed = 10
    np.random.seed(seed)
    # split training, validation and test sets based on each sample NSC ID
    NSC_All = np.array(DF.index.values, dtype=int)
    Train_Ind, Rest_Ind, Y_Train, Y_Rest = train_test_split(NSC_All, Y, test_size=0.2, random_state=seed)
    Validation_Ind, Test_Ind, Y_Validation, Y_Test = train_test_split(Rest_Ind, Y_Rest, test_size=0.5,
                                                                      random_state=seed)
    # Sort the NSCs
    Train_Ind = np.sort(Train_Ind)
    Validation_Ind = np.sort(Validation_Ind)
    Test_Ind = np.sort(Test_Ind)
    # Extracting the drug descriptors of each set based on their associated NSCs
    X_Train_Raw = Cell_Features.loc[Train_Ind]
    X_Validation_Raw = Cell_Features.loc[Validation_Ind]
    X_Test_Raw = Cell_Features.loc[Test_Ind]

    Y_Train = FilteredDF.loc[Train_Ind];
    Y_Train = np.array(Y_Train)
    Y_Train = to_categorical(Y_Train, 2)
    Y_Validation = FilteredDF.loc[Validation_Ind];
    Y_Validation = np.array(Y_Validation)
    Y_Validation = to_categorical(Y_Validation, 2)
    Y_Test = FilteredDF.loc[Test_Ind];
    Y_Test = np.array(Y_Test)
    #Y_Test = to_categorical(Y_Test, 2)

    X_Dummy = X_Train_Raw.values;
    X_Train = X_Dummy[:, 2:]
    X_Dummy = X_Validation_Raw.values;
    X_Validation = X_Dummy[:, 2:]
    X_Dummy = X_Test_Raw.values;
    X_Test = X_Dummy[:, 2:]

    # %% REFINED coordinates
    import math

    with open('MDS_mapping_GDSC2_CGC.pickle', 'rb') as file:
        gene_names, coords, map_in_int = pickle.load(file)

    # Convert data into images using the coordinates generated by REFINED
    # nn = 26  # Image size = sqrt(#features (drug descriptors))

    nn = math.ceil(np.sqrt(len(Feat_DF.columns)))

    X_Train_REFINED = REFINED_Im_Gen(X_Train, nn, map_in_int, gene_names, coords)
    X_Val_REFINED = REFINED_Im_Gen(X_Validation, nn, map_in_int, gene_names, coords)
    X_Test_REFINED = REFINED_Im_Gen(X_Test, nn, map_in_int, gene_names, coords)

    # %% importing tensorflow
    import tensorflow as tf
    from tensorflow.keras import layers, models
    from tensorflow.keras.callbacks import EarlyStopping

    # %% Defining the CNN Model
    Results_Data = np.zeros((1, 4))

    sz = X_Train_REFINED.shape
    Width = int(math.sqrt(sz[1]))
    Height = int(math.sqrt(sz[1]))
    CNN_Train = X_Train_REFINED.reshape(-1, Width, Height, 1)
    CNN_Val = X_Val_REFINED.reshape(-1, Width, Height, 1)
    CNN_Test = X_Test_REFINED.reshape(-1, Width, Height, 1)


    def CNN_model(Width, Height):
        nb_filters = 64
        nb_conv = 7

        model = models.Sequential()
        # Convlolutional layers
        model.add(layers.Conv2D(nb_filters * 1, (nb_conv, nb_conv), padding='valid', strides=2, dilation_rate=1,
                                input_shape=(Width, Height, 1)))
        model.add(layers.BatchNormalization())
        model.add(layers.Activation('relu'))
        model.add(layers.Conv2D(nb_filters * 1, (nb_conv, nb_conv), padding='valid', strides=2, dilation_rate=1))
        model.add(layers.BatchNormalization())
        model.add(layers.Activation('relu'))

        model.add(layers.Flatten())
        # Dense layers
        model.add(layers.Dense(256))
        model.add(layers.BatchNormalization())
        model.add(layers.Activation('relu'))

        model.add(layers.Dense(64))
        model.add(layers.BatchNormalization())
        model.add(layers.Activation('sigmoid'))
        model.add(layers.Dropout(1 - 0.7))

        model.add(layers.Dense(2))

        opt = tf.keras.optimizers.Adam(lr=0.0001)

        model.compile(optimizer=opt,loss='binary_crossentropy',metrics=['acc'])
        return model


    # Training the CNN Model
    model = CNN_model(Width, Height)
    ES = EarlyStopping(monitor='val_acc', mode='min', verbose=0, patience=30)
    CNN_History = model.fit(CNN_Train, Y_Train, batch_size=128, epochs=250, verbose=0,
                            validation_data=(CNN_Val, Y_Validation), callbacks=[ES])
    Y_Val_Pred_CNN = model.predict(CNN_Val, batch_size=128, verbose=1)
    Y_Pred_CNN = model.predict(CNN_Test, batch_size=128, verbose=1)

    print(model.summary())
    # Plot the Model
    plt.plot(CNN_History.history['acc'], label='train')
    plt.plot(CNN_History.history['val_acc'], label='Validation')
    plt.legend()
    plt.show()

    #fpr, tpr, threshold = roc_curve(true_labels, preds)
    # Measuring the REFINED-CNN performance (NRMSE, R2, PCC, Bias)
    CNN_NRMSE, CNN_R2 = NRMSE(Y_Test, Y_Pred_CNN)
    print(CNN_NRMSE, "NRMSE of " + SEL_CEL)
    print(CNN_R2, "R2 of " + SEL_CEL)
    Y_Test = np.reshape(Y_Test, (Y_Pred_CNN.shape))
    Y_Test = np.array(Y_Test, dtype='float')
    CNN_ER = Y_Test - Y_Pred_CNN
    CNN_PCC, p_value = pearsonr(Y_Test, Y_Pred_CNN)

    print(CNN_PCC, "PCC of " + SEL_CEL)
    Y_Validation = Y_Validation.reshape(len(Y_Validation), 1)
    Y_Test = Y_Test.reshape(len(Y_Test), 1)
    Bias = Bias_Calc(Y_Test, Y_Pred_CNN)

    Results_Data[0, :] = [CNN_NRMSE, CNN_PCC, CNN_R2, Bias]
    Results = pd.DataFrame(data=Results_Data, columns=["NRMSE", "PCC", "R2", "Bias"], index=Model_Names)
    Results_Dic[SEL_CEL] = Results

print(Results_Dic)